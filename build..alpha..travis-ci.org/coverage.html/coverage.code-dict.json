{"/home/travis/build/npmtest/node-npmtest-generator-ionic-gulp/test.js":"/* istanbul instrument in package npmtest_generator_ionic_gulp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-ionic-gulp/lib.npmtest_generator_ionic_gulp.js":"/* istanbul instrument in package npmtest_generator_ionic_gulp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_ionic_gulp = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_ionic_gulp = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-ionic-gulp/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-ionic-gulp && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_ionic_gulp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_ionic_gulp\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_ionic_gulp.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_ionic_gulp.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_ionic_gulp.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_ionic_gulp.__dirname + '/lib.npmtest_generator_ionic_gulp.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-ionic-gulp/node_modules/generator-ionic-gulp/app/index.js":"'use strict';\nvar yeoman = require( 'yeoman-generator' );\nvar chalk  = require( 'chalk' );\nvar yosay  = require( 'yosay' );\nvar path   = require( 'path'  );\n\nvar appPath = path.join(process.cwd(), 'app');\n\n\nmodule.exports = yeoman.generators.Base.extend({\n  initializing: function () {\n    this.pkg = require('../package.json');\n  },\n\n  prompting: {\n\n    askForNames: function askForNames() {\n      var done = this.async();\n\n      // Have Yeoman greet the user.\n      this.log(yosay(\n        'Welcome to the ' + chalk.red('ionic-gulp') + ' generator. Let\\'s build an ionic app, shall we?'\n      ));\n\n      var prompts = [{\n        type: 'input',\n        name: 'appName',\n        message: 'What\\'s the app name?',\n        default : this.appname // Default to current folder name\n      },\n      {\n        type: 'confirm',\n        name: 'browserify',\n        message: 'Would you like to use Browserify?',\n        default : false\n      },\n      {\n        type: 'input',\n        name: 'userName',\n        message: 'The author\\'s name? (for config files)',\n        default : this.user.git.name || 'Your Name'\n      },\n      {\n        type: 'input',\n        name: 'userMail',\n        message: 'Author email? (for config files)',\n        default : this.user.git.email || 'email@example.com'\n\n      }];\n\n      this.prompt(prompts, function(props) {\n        this.appName = props.appName;\n        this.userName = props.userName;\n        this.userMail = props.userMail;\n\n        // Store the Browserify preference for future sub-generator use\n        //\n        this.config.set( 'browserify', props.browserify );\n\n        done();\n      }.bind(this));\n    },\n\n    askForAppId: function askForAppId() {\n      var done = this.async();\n      this.prompt([{\n        type: 'input',\n        name: 'appId',\n        message: 'The app id?',\n        default : 'com.' + this._.classify(this.userName).toLowerCase() + '.' + this._.classify(this.appName).toLowerCase()\n      }], function (props) {\n        this.appId = props.appId;\n        done();\n      }.bind(this));\n    }\n\n  },\n\n  writing: {\n\n    setup: function () {\n      var browserifyEnabled = this.config.get( 'browserify' ) === true;\n\n      this.fs.copyTpl(\n        this.templatePath(browserifyEnabled ? '_package.browserify.json' : '_package.json'),\n        this.destinationPath('package.json'),\n        { appName: this._.underscored(this.appName),\n          userName: this.userName,\n          userEmail: this.userMail }\n      );\n      this.fs.copyTpl(\n        this.templatePath('_bower.json'),\n        this.destinationPath('bower.json'),\n        { appName: this._.classify(this.appName),\n          userName: this.userName,\n          userEmail: this.userMail }\n      );\n      this.fs.copyTpl(\n        this.templatePath('_config.xml'),\n        this.destinationPath('config.xml'),\n        { appName: this.appName,\n          userName: this.userName,\n          userEmail: this.userMail,\n          widgetId: this.appId }\n      );\n\n      this.fs.copyTpl(\n        this.templatePath(browserifyEnabled ? '_gulpfile.browserify.js' : '_gulpfile.js'),\n        this.destinationPath('gulpfile.js'),\n        { ngModulName: this._.classify(this.appName) }\n      );\n\n      this.fs.copy(\n        this.templatePath('editorconfig'),\n        this.destinationPath('.editorconfig')\n      );\n      this.fs.copy(\n        this.templatePath(browserifyEnabled ? 'gitignore.browserify' : 'gitignore'),\n        this.destinationPath('.gitignore')\n      );\n      this.fs.copy(\n        this.templatePath('jshintrc'),\n        this.destinationPath('.jshintrc')\n      );\n\n      this.mkdir('helpers');\n      this.mkdir('www');\n\n      this.fs.copy(\n        this.templatePath('helpers/emulateios'),\n        this.destinationPath('helpers/emulateios')\n      );\n\n    },\n\n    projectfiles: function () {\n      var browserifyEnabled = this.config.get( 'browserify' ) === true;\n\n      this.directory('app', 'app');\n      this.directory('hooks', 'hooks');\n\n      this.mkdir('app/icons');\n      this.mkdir('app/images');\n      this.mkdir('resources');\n\n      this.fs.copyTpl(\n        this.templatePath('index.html'),\n        this.destinationPath('app/index.html'),\n        { title: this.appName, ngModulName: this._.classify(this.appName)  }\n      );\n\n      this.fs.copyTpl(\n        this.templatePath('home.html'),\n        this.destinationPath('app/templates/views/home.html'),\n        { title: this.appName }\n      );\n\n      if ( browserifyEnabled )\n      {\n        // config\n        this.fs.copyTpl(\n          this.templatePath('scripts/apiEndpoint.js'),\n          this.destinationPath('app/scripts/configuration.js'),\n          { ngModulName: this._.classify(this.appName) }\n        );\n\n        // app\n        this.fs.copyTpl(\n          this.templatePath('src/app.js'),\n          this.destinationPath('app/src/app.js'),\n          { ngModulName: this._.classify(this.appName) }\n        );\n\n        // controllers\n        this.fs.copyTpl(\n          this.templatePath('src/controllers/homeController.js'),\n          this.destinationPath('app/src/controllers/homeController.js'),\n          { ngModulName: this._.classify(this.appName) }\n        );\n\n        this.fs.copyTpl(\n          this.templatePath('src/controllers/mainController.js'),\n          this.destinationPath('app/src/controllers/mainController.js'),\n          { ngModulName: this._.classify(this.appName) }\n        );\n\n        this.fs.copyTpl(\n          this.templatePath('src/controllers/settingsController.js'),\n          this.destinationPath('app/src/controllers/settingsController.js'),\n          { ngModulName: this._.classify(this.appName) }\n        );\n\n        // services\n        this.fs.copyTpl(\n          this.templatePath('src/services/ExampleService.js'),\n          this.destinationPath('app/src/services/ExampleService.js'),\n          { ngModulName: this._.classify(this.appName) }\n        );\n\n        this.fs.copyTpl(\n          this.templatePath('src/services/ApiService.js'),\n          this.destinationPath('app/src/services/ApiService.js'),\n          { ngModulName: this._.classify(this.appName) }\n        );\n      }\n      else\n      {\n        // controllers\n        this.fs.copyTpl(\n          this.templatePath('scripts/homeController.js'),\n          this.destinationPath('app/scripts/controllers/homeController.js'),\n          { ngModulName: this._.classify(this.appName) }\n        );\n\n        this.fs.copyTpl(\n          this.templatePath('scripts/mainController.js'),\n          this.destinationPath('app/scripts/controllers/mainController.js'),\n          { ngModulName: this._.classify(this.appName) }\n        );\n\n        this.fs.copyTpl(\n          this.templatePath('scripts/settingsController.js'),\n          this.destinationPath('app/scripts/controllers/settingsController.js'),\n          { ngModulName: this._.classify(this.appName) }\n        );\n\n        // services\n        this.fs.copyTpl(\n          this.templatePath('scripts/ExampleService.js'),\n          this.destinationPath('app/scripts/services/ExampleService.js'),\n          { ngModulName: this._.classify(this.appName) }\n        );\n\n        this.fs.copyTpl(\n          this.templatePath('scripts/ApiService.js'),\n          this.destinationPath('app/scripts/services/ApiService.js'),\n          { ngModulName: this._.classify(this.appName) }\n        );\n\n        // config\n        this.fs.copyTpl(\n          this.templatePath('scripts/apiEndpoint.js'),\n          this.destinationPath('app/scripts/config/apiEndpoint.js'),\n          { ngModulName: this._.classify(this.appName) }\n        );\n\n        // utils\n        this.fs.copyTpl(\n          this.templatePath('scripts/lodash.js'),\n          this.destinationPath('app/scripts/utils/lodash.js'),\n          { ngModulName: this._.classify(this.appName) }\n        );\n\n        // app\n\n        this.fs.copyTpl(\n          this.templatePath('scripts/app.js'),\n          this.destinationPath('app/scripts/app.js'),\n          { ngModulName: this._.classify(this.appName) }\n        );\n      }\n\n      this.fs.copy(\n        this.templatePath('splash.png'),\n        this.destinationPath('resources/splash.png')\n      );\n\n      this.fs.copy(\n        this.templatePath('icon.png'),\n        this.destinationPath('resources/icon.png')\n      );\n    }\n\n  },\n\n  install: function () {\n    this.installDependencies({\n      skipInstall: this.options['skip-install']\n    });\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-generator-ionic-gulp/node_modules/generator-ionic-gulp/app/templates/_gulpfile.browserify.js":"'use strict';\n\nvar appName = '<%= ngModulName %>';\n\nvar gulp = require('gulp');\nvar plugins = require('gulp-load-plugins')();\nvar del = require('del');\nvar beep = require('beepbeep');\nvar express = require('express');\nvar path = require('path');\nvar open = require('open');\nvar stylish = require('jshint-stylish');\nvar connectLr = require('connect-livereload');\nvar streamqueue = require('streamqueue');\nvar runSequence = require('run-sequence');\nvar merge = require('merge-stream');\nvar ripple = require('ripple-emulator');\nvar browserify = require('browserify');\nvar source = require('vinyl-source-stream');\nvar buffer = require('vinyl-buffer');\nvar uglify = require('gulp-uglify');\nvar sourcemaps = require('gulp-sourcemaps');\nvar gutil = require('gulp-util');\nvar wiredep = require('wiredep');\nvar babel = require('babelify');\n\n/**\n * Parse arguments\n */\nvar args = require('yargs')\n    .alias('e', 'emulate')\n    .alias('b', 'build')\n    .alias('r', 'run')\n    // remove all debug messages (console.logs, alerts etc) from release build\n    .alias('release', 'strip-debug')\n    .default('build', false)\n    .default('port', 9000)\n    .default('strip-debug', false)\n    .argv;\n\nvar build = !!(args.build || args.emulate || args.run);\nvar emulate = args.emulate;\nvar run = args.run;\nvar port = args.port;\nvar stripDebug = !!args.stripDebug;\nvar targetDir = path.resolve(build ? 'www' : '.tmp');\n\n// if we just use emualate or run without specifying platform, we assume iOS\n// in this case the value returned from yargs would just be true\nif (emulate === true) {\n    emulate = 'ios';\n}\nif (run === true) {\n    run = 'ios';\n}\n\n// global error handler\nvar errorHandler = function(error) {\n  if (build) {\n    throw error;\n  } else {\n    beep(2, 170);\n    plugins.util.log(error);\n  }\n};\n\n\n// clean target dir\ngulp.task('clean', function(done) {\n  return del([targetDir, 'app/scripts/bundle.js','app/scripts/bundle.js.map'], done);\n});\n\n// precompile .scss and concat with ionic.css\ngulp.task('styles', function() {\n\n  var options = build ? { style: 'compressed' } : { style: 'expanded' };\n\n  var sassStream = gulp.src('app/styles/main.scss')\n    .pipe(plugins.sass(options))\n    .on('error', function(err) {\n      console.log('err: ', err);\n      beep();\n    });\n\n  // build ionic css dynamically to support custom themes\n  var ionicStream = gulp.src('app/styles/ionic-styles.scss')\n    .pipe(plugins.cached('ionic-styles'))\n    .pipe(plugins.sass(options))\n    // cache and remember ionic .scss in order to cut down re-compile time\n    .pipe(plugins.remember('ionic-styles'))\n    .on('error', function(err) {\n        console.log('err: ', err);\n        beep();\n      });\n\n  return streamqueue({ objectMode: true }, ionicStream, sassStream)\n    .pipe(plugins.autoprefixer('last 1 Chrome version', 'last 3 iOS versions', 'last 3 Android versions'))\n    .pipe(plugins.concat('main.css'))\n    .pipe(plugins.if(build, plugins.stripCssComments()))\n    .pipe(plugins.if(build && !emulate, plugins.rev()))\n    .pipe(gulp.dest(path.join(targetDir, 'styles')))\n    .on('error', errorHandler);\n});\n\n// bundle all the src files into scripts/bundle.js\ngulp.task('browserify', function () {\n  // set up the browserify instance on a task basis\n  var b = browserify({\n    entries: './app/src/app.js',\n    debug: !build\n  }).transform('babelify', {presets: ['es2015']});\n\n  return b.bundle()\n    .pipe(source('bundle.js'))\n    .pipe(buffer())\n    .pipe(sourcemaps.init({loadMaps: true}))\n        // Add transformation tasks to the pipeline here.\n        .pipe(uglify())\n        .on('error', gutil.log)\n    .pipe(plugins.if(!build,sourcemaps.write('./')))\n    .pipe(gulp.dest('./app/scripts/'));\n});\n\n// build templatecache, copy scripts.\n// if build: concat, minsafe, uglify and versionize\ngulp.task('scripts', ['browserify'], function() {\n  var dest = path.join(targetDir, 'scripts');\n\n  var minifyConfig = {\n    collapseWhitespace: true,\n    collapseBooleanAttributes: true,\n    removeAttributeQuotes: true,\n    removeComments: true\n  };\n\n  // prepare angular template cache from html templates\n  // (remember to change appName var to desired module name)\n  var templateStream = gulp\n    .src('**/*.html', { cwd: 'app/templates'})\n    .pipe(plugins.angularTemplatecache('templates.js', {\n      root: 'templates/',\n      module: appName,\n      htmlmin: build && minifyConfig\n    }));\n\n  var scriptStream = gulp\n    .src( ['bundle.js', 'bundle.js.map', 'configuration.js', 'templates.js' ], { cwd: 'app/scripts' })\n\n    .pipe(plugins.if(!build, plugins.changed(dest)));\n\n  return streamqueue({ objectMode: true }, scriptStream, templateStream)\n    .pipe(plugins.if(build, plugins.ngAnnotate()))\n    .pipe(plugins.if(stripDebug, plugins.stripDebug()))\n    .pipe(plugins.if(build, plugins.concat('app.js')))\n    .pipe(plugins.if(build, plugins.uglify()))\n    .pipe(plugins.if(build && !emulate, plugins.rev()))\n\n    .pipe(gulp.dest(dest))\n\n    .on('error', errorHandler);\n});\n\n// copy fonts\ngulp.task('fonts', function() {\n  return gulp\n    .src(['app/fonts/*.*', 'bower_components/ionic/release/fonts/*.*'])\n\n    .pipe(gulp.dest(path.join(targetDir, 'fonts')))\n\n    .on('error', errorHandler);\n});\n\n\n\n// generate iconfont\ngulp.task('iconfont', function(){\n  return gulp.src('app/icons/*.svg', {\n        buffer: false\n    })\n    .pipe(plugins.iconfontCss({\n      fontName: 'ownIconFont',\n      path: 'app/icons/own-icons-template.css',\n      targetPath: '../styles/own-icons.css',\n      fontPath: '../fonts/'\n    }))\n    .pipe(plugins.iconfont({\n        fontName: 'ownIconFont'\n    }))\n    .pipe(gulp.dest(path.join(targetDir, 'fonts')))\n    .on('error', errorHandler);\n});\n\n// copy images\ngulp.task('images', function() {\n  return gulp.src('app/images/**/*.*')\n    .pipe(gulp.dest(path.join(targetDir, 'images')))\n\n    .on('error', errorHandler);\n});\n\n\n// lint js sources based on .jshintrc ruleset\ngulp.task('jsHint', function() {\n  return gulp\n    .src('app/src/**/*.js')\n    .pipe(plugins.jshint())\n    .pipe(plugins.jshint.reporter(stylish))\n    .on('error', errorHandler);\n});\n\n// concatenate and minify vendor sources\ngulp.task('vendor', function() {\n  var vendorFiles = wiredep().js;\n\n  return gulp.src(vendorFiles)\n    .pipe(plugins.concat('vendor.js'))\n    .pipe(plugins.if(build, plugins.uglify()))\n    .pipe(plugins.if(build, plugins.rev()))\n\n    .pipe(gulp.dest(targetDir))\n\n    .on('error', errorHandler);\n});\n\n\n// inject the files in index.html\ngulp.task('index', ['jsHint', 'scripts'], function() {\n\n  // build has a '-versionnumber' suffix\n  var cssNaming = 'styles/main*';\n\n  // injects 'src' into index.html at position 'tag'\n  var _inject = function(src, tag) {\n    return plugins.inject(src, {\n      starttag: '<!-- inject:' + tag + ':{{ext}} -->',\n      read: false,\n      addRootSlash: false\n    });\n  };\n\n  // get all our javascript sources\n  // in development mode, it's better to add each file seperately.\n  // it makes debugging easier.\n  var _getAllScriptSources = function() {\n    var scriptStream = gulp.src(['scripts/app.js', 'scripts/**/*.js'], { cwd: targetDir });\n    return streamqueue({ objectMode: true }, scriptStream);\n  };\n\n  return gulp.src('app/index.html')\n    // inject css\n    .pipe(_inject(gulp.src(cssNaming, { cwd: targetDir }), 'app-styles'))\n    // inject vendor.js\n    .pipe(_inject(gulp.src('vendor*.js', { cwd: targetDir }), 'vendor'))\n    // inject app.js (build) or all js files indivually (dev)\n    .pipe(plugins.if(build,\n      _inject(gulp.src('scripts/app*.js', { cwd: targetDir }), 'app'),\n      _inject(_getAllScriptSources(), 'app')\n    ))\n\n    .pipe(gulp.dest(targetDir))\n    .on('error', errorHandler);\n});\n\n// start local express server\ngulp.task('serve', function() {\n  express()\n    .use(!build ? connectLr() : function(){})\n    .use(express.static(targetDir))\n    .listen(port);\n  open('http://localhost:' + port + '/');\n});\n\n// ionic emulate wrapper\ngulp.task('ionic:emulate', plugins.shell.task([\n  'ionic emulate ' + emulate + ' --livereload --consolelogs'\n]));\n\n// ionic run wrapper\ngulp.task('ionic:run', plugins.shell.task([\n  'ionic run ' + run\n]));\n\n// ionic resources wrapper\ngulp.task('icon', plugins.shell.task([\n  'ionic resources --icon'\n]));\ngulp.task('splash', plugins.shell.task([\n  'ionic resources --splash'\n]));\ngulp.task('resources', plugins.shell.task([\n  'ionic resources'\n]));\n\n// select emulator device\ngulp.task('select', plugins.shell.task([\n  './helpers/emulateios'\n]));\n\n// ripple emulator\ngulp.task('ripple', ['scripts', 'styles', 'watchers'], function() {\n\n  var options = {\n    keepAlive: false,\n    open: true,\n    port: 4400\n  };\n\n  // Start the ripple server\n  ripple.emulate.start(options);\n\n  open('http://localhost:' + options.port + '?enableripple=true');\n});\n\n\n// start watchers\ngulp.task('watchers', function() {\n  plugins.livereload.listen();\n  gulp.watch('app/styles/**/*.scss', ['styles']);\n  gulp.watch('app/fonts/**', ['fonts']);\n  gulp.watch('app/icons/**', ['iconfont']);\n  gulp.watch('app/images/**', ['images']);\n  gulp.watch(['app/scripts/**/*.js','!app/scripts/bundle.js'], ['index']);\n  gulp.watch('./bower.json', ['vendor']);\n  gulp.watch('app/templates/**/*.html', ['index']);\n  gulp.watch('app/index.html', ['index']);\n  gulp.watch('app/src/**/*.js', ['scripts']);\n  gulp.watch(targetDir + '/**')\n    .on('change', plugins.livereload.changed)\n    .on('error', errorHandler);\n});\n\n// no-op = empty function\ngulp.task('noop', function() {});\n\n// our main sequence, with some conditional jobs depending on params\ngulp.task('default', function(done) {\n  runSequence(\n    'clean',\n    'iconfont',\n    [\n      'fonts',\n      'styles',\n      'images',\n      'vendor'\n    ],\n    'index',\n    build ? 'noop' : 'watchers',\n    build ? 'noop' : 'serve',\n    emulate ? ['ionic:emulate', 'watchers'] : 'noop',\n    run ? 'ionic:run' : 'noop',\n    done);\n});\n","/home/travis/build/npmtest/node-npmtest-generator-ionic-gulp/node_modules/generator-ionic-gulp/app/templates/_gulpfile.js":"'use strict';\n\nvar appName = '<%= ngModulName %>';\n\nvar gulp = require('gulp');\nvar plugins = require('gulp-load-plugins')();\nvar del = require('del');\nvar beep = require('beepbeep');\nvar express = require('express');\nvar path = require('path');\nvar open = require('open');\nvar stylish = require('jshint-stylish');\nvar connectLr = require('connect-livereload');\nvar streamqueue = require('streamqueue');\nvar runSequence = require('run-sequence');\nvar merge = require('merge-stream');\nvar ripple = require('ripple-emulator');\nvar wiredep = require('wiredep');\n\n/**\n * Parse arguments\n */\nvar args = require('yargs')\n    .alias('e', 'emulate')\n    .alias('b', 'build')\n    .alias('r', 'run')\n    // remove all debug messages (console.logs, alerts etc) from release build\n    .alias('release', 'strip-debug')\n    .default('build', false)\n    .default('port', 9000)\n    .default('strip-debug', false)\n    .argv;\n\nvar build = !!(args.build || args.emulate || args.run);\nvar emulate = args.emulate;\nvar run = args.run;\nvar port = args.port;\nvar stripDebug = !!args.stripDebug;\nvar targetDir = path.resolve(build ? 'www' : '.tmp');\n\n// if we just use emualate or run without specifying platform, we assume iOS\n// in this case the value returned from yargs would just be true\nif (emulate === true) {\n    emulate = 'ios';\n}\nif (run === true) {\n    run = 'ios';\n}\n\n// global error handler\nvar errorHandler = function(error) {\n  if (build) {\n    throw error;\n  } else {\n    beep(2, 170);\n    plugins.util.log(error);\n  }\n};\n\n\n// clean target dir\ngulp.task('clean', function(done) {\n  return del([targetDir], done);\n});\n\n// precompile .scss and concat with ionic.css\ngulp.task('styles', function() {\n\n  var options = build ? { style: 'compressed' } : { style: 'expanded' };\n\n  var sassStream = gulp.src('app/styles/main.scss')\n    .pipe(plugins.sass(options))\n    .on('error', function(err) {\n      console.log('err: ', err);\n      beep();\n    });\n\n  // build ionic css dynamically to support custom themes\n  var ionicStream = gulp.src('app/styles/ionic-styles.scss')\n    .pipe(plugins.cached('ionic-styles'))\n    .pipe(plugins.sass(options))\n    // cache and remember ionic .scss in order to cut down re-compile time\n    .pipe(plugins.remember('ionic-styles'))\n    .on('error', function(err) {\n        console.log('err: ', err);\n        beep();\n      });\n\n  return streamqueue({ objectMode: true }, ionicStream, sassStream)\n    .pipe(plugins.autoprefixer('last 1 Chrome version', 'last 3 iOS versions', 'last 3 Android versions'))\n    .pipe(plugins.concat('main.css'))\n    .pipe(plugins.if(build, plugins.stripCssComments()))\n    .pipe(plugins.if(build && !emulate, plugins.rev()))\n    .pipe(gulp.dest(path.join(targetDir, 'styles')))\n    .on('error', errorHandler);\n});\n\n\n// build templatecache, copy scripts.\n// if build: concat, minsafe, uglify and versionize\ngulp.task('scripts', function() {\n  var dest = path.join(targetDir, 'scripts');\n\n  var minifyConfig = {\n    collapseWhitespace: true,\n    collapseBooleanAttributes: true,\n    removeAttributeQuotes: true,\n    removeComments: true\n  };\n\n  // prepare angular template cache from html templates\n  // (remember to change appName var to desired module name)\n  var templateStream = gulp\n    .src('**/*.html', { cwd: 'app/templates'})\n    .pipe(plugins.angularTemplatecache('templates.js', {\n      root: 'templates/',\n      module: appName,\n      htmlmin: build && minifyConfig\n    }));\n\n  var scriptStream = gulp\n    .src(['templates.js', 'app.js', '**/*.js'], { cwd: 'app/scripts' })\n\n    .pipe(plugins.if(!build, plugins.changed(dest)));\n\n  return streamqueue({ objectMode: true }, scriptStream, templateStream)\n    .pipe(plugins.if(build, plugins.ngAnnotate()))\n    .pipe(plugins.if(stripDebug, plugins.stripDebug()))\n    .pipe(plugins.if(build, plugins.concat('app.js')))\n    .pipe(plugins.if(build, plugins.uglify()))\n    .pipe(plugins.if(build && !emulate, plugins.rev()))\n\n    .pipe(gulp.dest(dest))\n\n    .on('error', errorHandler);\n});\n\n// copy fonts\ngulp.task('fonts', function() {\n  return gulp\n    .src(['app/fonts/*.*', 'bower_components/ionic/release/fonts/*.*'])\n\n    .pipe(gulp.dest(path.join(targetDir, 'fonts')))\n\n    .on('error', errorHandler);\n});\n\n\n// generate iconfont\ngulp.task('iconfont', function(){\n  return gulp.src('app/icons/*.svg', {\n        buffer: false\n    })\n    .pipe(plugins.iconfontCss({\n      fontName: 'ownIconFont',\n      path: 'app/icons/own-icons-template.css',\n      targetPath: '../styles/own-icons.css',\n      fontPath: '../fonts/'\n    }))\n    .pipe(plugins.iconfont({\n        fontName: 'ownIconFont'\n    }))\n    .pipe(gulp.dest(path.join(targetDir, 'fonts')))\n    .on('error', errorHandler);\n});\n\n// copy images\ngulp.task('images', function() {\n  return gulp.src('app/images/**/*.*')\n    .pipe(gulp.dest(path.join(targetDir, 'images')))\n\n    .on('error', errorHandler);\n});\n\n\n// lint js sources based on .jshintrc ruleset\ngulp.task('jsHint', function(done) {\n  return gulp\n    .src('app/scripts/**/*.js')\n    .pipe(plugins.jshint())\n    .pipe(plugins.jshint.reporter(stylish))\n\n    .on('error', errorHandler);\n    done();\n});\n\n// concatenate and minify vendor sources\ngulp.task('vendor', function() {\n  var vendorFiles = wiredep().js;\n\n  return gulp.src(vendorFiles)\n    .pipe(plugins.concat('vendor.js'))\n    .pipe(plugins.if(build, plugins.uglify()))\n    .pipe(plugins.if(build, plugins.rev()))\n\n    .pipe(gulp.dest(targetDir))\n\n    .on('error', errorHandler);\n});\n\n\n// inject the files in index.html\ngulp.task('index', ['jsHint', 'scripts'], function() {\n\n  // build has a '-versionnumber' suffix\n  var cssNaming = 'styles/main*';\n\n  // injects 'src' into index.html at position 'tag'\n  var _inject = function(src, tag) {\n    return plugins.inject(src, {\n      starttag: '<!-- inject:' + tag + ':{{ext}} -->',\n      read: false,\n      addRootSlash: false\n    });\n  };\n\n  // get all our javascript sources\n  // in development mode, it's better to add each file seperately.\n  // it makes debugging easier.\n  var _getAllScriptSources = function() {\n    var scriptStream = gulp.src(['scripts/app.js', 'scripts/**/*.js'], { cwd: targetDir });\n    return streamqueue({ objectMode: true }, scriptStream);\n  };\n\n  return gulp.src('app/index.html')\n    // inject css\n    .pipe(_inject(gulp.src(cssNaming, { cwd: targetDir }), 'app-styles'))\n    // inject vendor.js\n    .pipe(_inject(gulp.src('vendor*.js', { cwd: targetDir }), 'vendor'))\n    // inject app.js (build) or all js files indivually (dev)\n    .pipe(plugins.if(build,\n      _inject(gulp.src('scripts/app*.js', { cwd: targetDir }), 'app'),\n      _inject(_getAllScriptSources(), 'app')\n    ))\n\n    .pipe(gulp.dest(targetDir))\n    .on('error', errorHandler);\n});\n\n// start local express server\ngulp.task('serve', function() {\n  express()\n    .use(!build ? connectLr() : function(){})\n    .use(express.static(targetDir))\n    .listen(port);\n  open('http://localhost:' + port + '/');\n});\n\n// ionic emulate wrapper\ngulp.task('ionic:emulate', plugins.shell.task([\n  'ionic emulate ' + emulate + ' --livereload --consolelogs'\n]));\n\n// ionic run wrapper\ngulp.task('ionic:run', plugins.shell.task([\n  'ionic run ' + run\n]));\n\n// ionic resources wrapper\ngulp.task('icon', plugins.shell.task([\n  'ionic resources --icon'\n]));\ngulp.task('splash', plugins.shell.task([\n  'ionic resources --splash'\n]));\ngulp.task('resources', plugins.shell.task([\n  'ionic resources'\n]));\n\n// select emulator device\ngulp.task('select', plugins.shell.task([\n  './helpers/emulateios'\n]));\n\n// ripple emulator\ngulp.task('ripple', ['scripts', 'styles', 'watchers'], function() {\n\n  var options = {\n    keepAlive: false,\n    open: true,\n    port: 4400\n  };\n\n  // Start the ripple server\n  ripple.emulate.start(options);\n\n  open('http://localhost:' + options.port + '?enableripple=true');\n});\n\n\n// start watchers\ngulp.task('watchers', function() {\n  plugins.livereload.listen();\n  gulp.watch('app/styles/**/*.scss', ['styles']);\n  gulp.watch('app/fonts/**', ['fonts']);\n  gulp.watch('app/icons/**', ['iconfont']);\n  gulp.watch('app/images/**', ['images']);\n  gulp.watch('app/scripts/**/*.js', ['index']);\n  gulp.watch('./bower.json', ['vendor']);\n  gulp.watch('app/templates/**/*.html', ['index']);\n  gulp.watch('app/index.html', ['index']);\n  gulp.watch(targetDir + '/**')\n    .on('change', plugins.livereload.changed)\n    .on('error', errorHandler);\n});\n\n// no-op = empty function\ngulp.task('noop', function() {});\n\n// our main sequence, with some conditional jobs depending on params\ngulp.task('default', function(done) {\n  runSequence(\n    'clean',\n    'iconfont',\n    [\n      'fonts',\n      'styles',\n      'images',\n      'vendor'\n    ],\n    'index',\n    build ? 'noop' : 'watchers',\n    build ? 'noop' : 'serve',\n    emulate ? ['ionic:emulate', 'watchers'] : 'noop',\n    run ? 'ionic:run' : 'noop',\n    done);\n});\n"}